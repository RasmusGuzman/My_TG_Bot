from keyboards.inline import inline_keyboard
from telebot.types import Message
from config_data.config import RAPID_API_KEY
from loader import bot
import requests
from keyboards.reply import reply_keyboard

@bot.message_handler(commands=['custom'])
def bot_custom(message: Message):
    global chat_id
    chat_id = message.chat.id
    custom_kb = inline_keyboard.custom_search_keyboard()
    bot.reply_to(message, f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫", reply_markup=custom_kb)
    @bot.callback_query_handler(func=lambda call: call.data == 'custom_1')
    def check_data_act(call):
        global user_value
        user_value = 'custom_1'
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω. –∫–æ–ª-–≤–æ –±—É–∫–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –º–æ–µ–º –æ—Ç–≤–µ—Ç–µ:')
        bot.register_next_step_handler(message, check_start_num)

    @bot.callback_query_handler(func=lambda call: call.data == 'custom_2')
    def check_data_films(call):
        global user_value
        user_value = 'custom_2'
        bot.send_message(chat_id, '–í–≤–µ–¥–∏ –º–∏–Ω. –∫–æ–ª-–≤–æ –±—É–∫–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –º–æ–µ–º –æ—Ç–≤–µ—Ç–µ:')
        bot.register_next_step_handler(message, check_start_num)
def check_start_num(message):
    global start_num
    start_num = None
    try:
        start_num = int(message.text)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    except Exception:
        bot.send_message(chat_id, '–¢—ã –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å!')
        bot.send_message(chat_id, '–í–≤–µ–¥–∏ –º–∏–Ω. –∫–æ–ª-–≤–æ –±—É–∫–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –º–æ–µ–º –æ—Ç–≤–µ—Ç–µ:')
        bot.register_next_step_handler(message, check_start_num)
    if start_num:
        bot.send_message(chat_id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–∞–∫—Å. –∫–æ–ª-–≤–æ –±—É–∫–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –º–æ–µ–º –æ—Ç–≤–µ—Ç–µ:')
        bot.register_next_step_handler(message, check_final_num)


def check_final_num(message):
    global user_value
    global final_num
    final_num = None
    try:
        final_num = int(message.text)
    except Exception:
        bot.send_message(chat_id, '–¢—ã –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å –ª—é–±–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–æ–≤–π –∑–∞–ø—Ä–æ—Å!')
        bot.send_message(chat_id, '–í–≤–µ–¥–∏ –º–∞–∫—Å. –∫–æ–ª-–≤–æ –±—É–∫–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –º–æ–µ–º –æ—Ç–≤–µ—Ç–µ:')
        bot.register_next_step_handler(message, check_final_num)
    if final_num:
        if start_num >= final_num:
            bot.send_message(chat_id, '–ú–∞–∫—Å. —á–∏—Å–ª–æ –±—É–∫–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –º–∏–Ω. —á–∏—Å–ª—É –±—É–∫–≤!')
            bot.send_message(chat_id, '–í–≤–µ–¥–∏ –º–∞–∫—Å. –∫–æ–ª-–≤–æ –±—É–∫–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –º–æ–µ–º –æ—Ç–≤–µ—Ç–µ:')
            bot.register_next_step_handler(message, check_final_num)
        else:
            bot.send_message(chat_id, '–¢—ã –≥–æ—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫?', reply_markup=reply_keyboard.reply_custom())
            if user_value == 'custom_1':
                bot.register_next_step_handler(message, rev_actors_list)
            elif user_value == 'custom_2':
                bot.register_next_step_handler(message, rev_films_list)


def rev_actors_list(message):
    url = "https://moviesdatabase.p.rapidapi.com/actors"
    headers = {
        "X-RapidAPI-Key": RAPID_API_KEY,
        "X-RapidAPI-Host": "moviesdatabase.p.rapidapi.com"
    }

    response = requests.get(url, headers=headers)
    custom_dict = response.json()
    custom_list = []

    for i_elem in custom_dict['results']:
        custom_list.append([i_elem["primaryName"]])

    sorted_custom_list = [x[0] for x in custom_list if start_num <= len(x[0]) <= final_num]
    if len(sorted_custom_list) > 0:
        text = [f"{index + 1}: {actors} " for index, actors in enumerate(sorted_custom_list)]
        bot.send_message(chat_id, "\n".join(text), reply_markup=reply_keyboard.reply_kb())
    else:
        bot.send_message(chat_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∞–∫—Ç–µ—Ä–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ü§∑üèª‚Äç‚ôÇÔ∏è', reply_markup=reply_keyboard.reply_kb())


def rev_films_list(message):
    url = "https://moviesdatabase.p.rapidapi.com/titles"

    headers = {
        "X-RapidAPI-Key": RAPID_API_KEY,
        "X-RapidAPI-Host": "moviesdatabase.p.rapidapi.com"
    }

    response = requests.get(url, headers=headers)
    custom_films_dict = response.json()
    custom_films = []

    for i_elem in custom_films_dict['results']:
        custom_films.append([i_elem["titleText"]["text"]])

    sorted_custom_films = [x[0] for x in custom_films if start_num <= len(x[0]) <= final_num]
    if len(sorted_custom_films) > 0:
        text = [f"{index + 1}: {actors} " for index, actors in enumerate(sorted_custom_films)]
        bot.send_message(chat_id, "\n".join(text), reply_markup=reply_keyboard.reply_kb())
    else:
        bot.send_message(chat_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ñ–∏–ª—å–º–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ü§∑üèª‚Äç‚ôÇÔ∏è', reply_markup=reply_keyboard.reply_kb())

